/*
 *
 *  Copyright 2017 Netflix, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */

buildscript {
    repositories {
        jcenter()
        maven {
            url "http://repo.spring.io/milestone"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.0.RELEASE")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.3")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17")
        classpath("com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1")
    }
}

plugins {
    id "com.github.kt3k.coveralls" version "2.8.1"
    id "nebula.netflixoss" version "3.6.0"
    id "org.ajoberstar.github-pages" version "1.6.0"
}

apply plugin: "nebula-aggregate-javadocs"

ext.githubProjectName = rootProject.name

def javaProjects = subprojects.findAll {
    it.name != "metacat-demo" && it.name != "metacat-ddl" && it.name != "metacat-docs"
}

allprojects {
    apply plugin: "jacoco"
    apply plugin: "idea"
    apply plugin: "eclipse"

    repositories {
        jcenter()
        maven {
            url "http://repo.spring.io/milestone"
        }
        maven {
            url "http://redshift-maven-repository.s3-website-us-east-1.amazonaws.com/release"
        }
    }
}

idea {
    project {
        jdkName = "1.8"
        languageLevel = "1.8"
        vcs = "Git"
    }
}

task clean(type: Delete) {
    delete "build"
}

configure(javaProjects) {
    apply plugin: "nebula.netflixoss"
    apply plugin: "java"
    apply plugin: "checkstyle"
    apply plugin: "findbugs"
    apply plugin: "pmd"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "com.gorylenko.gradle-git-properties"
    apply plugin: "groovy"

    group = "com.netflix.${githubProjectName}"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencyManagement {
        imports {
            mavenBom "io.spring.platform:platform-bom:${spring_platform_version}"
//            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${spring_cloud_version}"
        }
    }

    configurations {
        all*.exclude module: "jcl-over-slf4j"
        all*.exclude module: "log4j-over-slf4j"
        all*.exclude module: "slf4j-jdk14"
    }

    dependencies {
        /*******************************
         * Compile Dependencies
         *******************************/

        compile("com.google.guava:guava")
        compile("com.google.code.findbugs:annotations")
        compile("com.google.code.findbugs:jsr305")

        /*******************************
         * Provided Dependencies
         *******************************/

        compileOnly("org.projectlombok:lombok")

        /*******************************
         * Runtime Dependencies
         *******************************/

        /*******************************
         * Test Dependencies
         *******************************/

        testCompile("cglib:cglib-nodep:${cglib_nodep_version}")
        testCompile("org.codehaus.groovy:groovy-all")
        testCompile("org.codehaus.gpars:gpars:${gpars_version}")
        testCompile("org.objenesis:objenesis")
        testCompile("org.spockframework:spock-core")
        testCompile("org.spockframework:spock-guice:${spock_version}")
        testRuntime("org.hsqldb:hsqldb")
    }

    compileJava {
//        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        options.incremental = true
    }

    compileTestJava {
//        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    checkstyle {
        toolVersion = "6.11"
        configFile = new File(project.parent.projectDir, "codequality/checkstyle/checkstyle.xml")
    }

    findbugs {
        excludeFilter = new File(project.parent.projectDir, "codequality/findbugs/excludeFilter.xml")
    }

    tasks.withType(Pmd) {
        reports.html.enabled true
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    // Print out full stack traces when our tests fail to assist debugging (e.g., when scanning Jenkins console output)
    tasks.withType(Test) {
        testLogging {
            exceptionFormat = "full"
        }
    }
}
