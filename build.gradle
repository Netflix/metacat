/*
 * Copyright 2016 Netflix, Inc.
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *        http://www.apache.org/licenses/LICENSE-2.0
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'nebula.netflixoss' version '3.6.0'
}

ext.githubProjectName = rootProject.name

allprojects {
    repositories {
        jcenter()
        maven {
            url "http://redshift-maven-repository.s3-website-us-east-1.amazonaws.com/release"
        }
    }
}

subprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'nebula.source-jar'
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'

    group = "com.netflix.${githubProjectName}"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    configurations {
        all*.exclude module: 'jcl-over-slf4j'
        all*.exclude module: 'log4j-over-slf4j'
        all*.exclude module: 'slf4j-jdk14'
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:1.16.10"
        testCompile 'org.spockframework:spock-core:1.1-groovy-2.4-rc-3'
        testCompile 'org.spockframework:spock-guice:1.1-groovy-2.4-rc-3'
        testCompile 'org.codehaus.gpars:gpars:1.2.1'
        testCompile 'org.objenesis:objenesis:2.2' // Required by spock to mock classes
        testCompile 'cglib:cglib-nodep:3.2.4'
        testCompile 'org.hsqldb:hsqldb:2.3.4'
    }

    checkstyle {
        toolVersion = "6.11"
        configFile = new File(project.parent.projectDir, "codequality/checkstyle/checkstyle.xml")
    }

    findbugs {
        excludeFilter = new File(project.parent.projectDir, "codequality/findbugs/excludeFilter.xml")
    }

    tasks.withType(Pmd) {
        reports.html.enabled true
    }

    // Print out full stack traces when our tests fail to assist debugging (e.g., when scanning Jenkins console output)
    tasks.withType(Test) {
        testLogging {
            exceptionFormat = 'full'
        }
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}
