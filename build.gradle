/*
 *
 *  Copyright 2017 Netflix, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */
import com.github.spotbugs.snom.SpotBugsTask
import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    repositories {
        jcenter()
        maven {
            url "http://repo.spring.io/milestone"
        }
        maven { url 'https://jitpack.io' }
        gradlePluginPortal()
    }

    dependencies {
        classpath("com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1")
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version '2.10.1'
    id 'nebula.netflixoss' version '8.8.1'
    id 'org.springframework.boot' version "${spring_boot_version}" apply false
    id 'com.gorylenko.gradle-git-properties' version '2.2.2' apply false
    id 'io.franzbecker.gradle-lombok' version '4.0.0' apply false
    id 'nebula.node' version '1.3.1' apply false
    id 'com.github.spotbugs' version '4.4.1' apply false
}

apply plugin: "nebula-aggregate-javadocs"

ext {
    githubProjectName = rootProject.name
}

def javaProjects = subprojects.findAll {
    it.name != "metacat-demo" && it.name != "metacat-ddl" && it.name != "metacat-docs"
}

allprojects {
    apply plugin: "jacoco"
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: "nebula.netflixoss"
    apply plugin: "io.franzbecker.gradle-lombok"

    repositories {
        jcenter()
        maven {
            url "http://repo.spring.io/milestone"
        }
        maven {
            url "http://redshift-maven-repository.s3-website-us-east-1.amazonaws.com/release"
        }
        maven {
            url 'https://jitpack.io'
        }
    }
}

idea {
    project {
        jdkName = "1.8"
        languageLevel = "1.8"
        vcs = "Git"
    }
}

configure(javaProjects) {
    apply plugin: "java"
    apply plugin: "checkstyle"
    apply plugin: "com.github.spotbugs"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "com.gorylenko.gradle-git-properties"
    apply plugin: "groovy"
    apply plugin: "io.franzbecker.gradle-lombok"

    group = "com.netflix.${githubProjectName}"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${spring_cloud_version}"
            mavenBom "org.spockframework:spock-bom:${spock_version}"
            mavenBom "com.google.inject:guice-bom:${google_guice_version}"
        }
        dependencies {
            dependency("com.github.spotbugs:spotbugs-annotations:4.0.6")
            dependency("org.codehaus.groovy:groovy-all:2.5.9")
            dependencySet(group: "org.ow2.asm", version: "8.0.1") {
                entry "asm"
                entry "asm-analysis"
                entry "asm-commons"
                entry "asm-tree"
                entry "asm-util"
            }
            dependency("cglib:cglib-nodep:3.2.4")
            dependency("com.amazon.redshift:redshift-jdbc42:1.2.1.1001")
            dependency("com.github.fge:json-patch:1.9")
            dependency("com.github.rholder:guava-retrying:2.0.0")
            dependency("commons-dbutils:commons-dbutils:1.6")
            dependencySet(group: "com.netflix.spectator", version: "0.111.0") {
                entry "spectator-api"
                entry "spectator-reg-servo"
            }
            dependency("io.springfox:springfox-boot-starter:3.0.0")
            dependencySet(group: "io.swagger", version: "1.6.2") {
                entry "swagger-annotations"
                entry "swagger-jersey2-jaxrs"
            }
            dependency("de.danielbechler:java-object-diff:0.91.1")
            dependency("io.airlift:testing-mysql-server:0.1")
            dependency("net.sf.dozer:dozer:5.5.1")
            dependency("nl.jqno.equalsverifier:equalsverifier:1.7.2")
            dependency("org.apache.hadoop:hadoop-core:1.2.1")
            dependencySet(group: "org.apache.hive", version: "1.2.1") {
                entry "hive-metastore"
            }
            dependency("log4j:log4j:1.2.17")
            dependency("org.json:json:20180813")
            dependency("commons-logging:commons-logging:1.2")
            dependency("org.apache.pig:pig:0.14.0")
            dependency("org.codehaus.gpars:gpars:1.2.1")
            /**es 5.4.1 dependencies*/
            dependency("org.elasticsearch.client:transport:5.4.1")
            dependency("net.snowflake:snowflake-jdbc:3.4.2")
            dependency("com.esotericsoftware.kryo:kryo:2.22")
            dependency("org.apache.iceberg:iceberg-spark-runtime:${iceberg_version}")
        }
    }

    configurations {
        all*.exclude module: "jcl-over-slf4j"
        all*.exclude module: "log4j-over-slf4j"
        all*.exclude module: "slf4j-jdk14"
        all*.exclude module: "slf4j-log4j12"
        all*.exclude module: "log4j-to-slf4j"
        all*.exclude group: "asm"
    }

    dependencies {

        /*******************************
         * Compile Dependencies
         *******************************/

        /*******************************
         * Provided Dependencies
         *******************************/
        compileOnly("com.github.spotbugs:spotbugs-annotations")
        /*******************************
         * Runtime Dependencies
         *******************************/

        /*******************************
         * Test Dependencies
         *******************************/
        testCompile("log4j:log4j")
        testCompile("cglib:cglib-nodep")
        testCompile("org.codehaus.groovy:groovy-all")
        testCompile("org.codehaus.gpars:gpars")
        testCompile("org.objenesis:objenesis")
        testCompile("org.spockframework:spock-core")
        testCompile("org.spockframework:spock-guice")
        testCompile("org.spockframework:spock-spring")
        testCompile("org.springframework.boot:spring-boot-starter-test")
        testRuntime("org.hsqldb:hsqldb")
    }

    compileJava {
//        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        options.incremental = true
    }

    compileTestJava {
//        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    checkstyle {
        toolVersion = "6.11"
        configFile = new File(project.parent.projectDir, "codequality/checkstyle/checkstyle.xml")
    }

    spotbugs {
        toolVersion = '4.0.6'
        excludeFilter = new File(project.parent.projectDir, "codequality/findbugs/excludeFilter.xml")
    }
    spotbugsTest.enabled = false

    tasks.withType(SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    // Print out full stack traces when our tests fail to assist debugging (e.g., when scanning Jenkins console output)
    tasks.withType(Test) {
        testLogging {
            exceptionFormat = "full"
        }
    }

    javadoc {
        exclude 'com/netflix/metacat/common/server/partition/parser/**'
    }
}
