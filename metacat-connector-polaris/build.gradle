/*
 *
 *  Copyright 2021 Netflix, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */

apply plugin: 'nebula.facet'

facets {
    functionalTest {
        parentSourceSet = "test"
        includeInCheckLifecycle = true
    }
}
ext {
    runDockerContainers = project.hasProperty('startCluster') ? Boolean.getBoolean('startCluster') : true
}

dependencies {
    /*******************************
     * Compile Dependencies
     *******************************/
    api(project(":metacat-connector-hive"))
    api(project(":metacat-connector-jdbc"))
    api(project(":metacat-common-server"))
    api('org.springframework.data:spring-data-jpa')
    api('org.springframework.boot:spring-boot-starter-aop')
    api('org.springframework.retry:spring-retry')
    api("org.springframework:spring-aspects")
    api("com.h2database:h2")

    /*******************************
     * Provided Dependencies
     *******************************/

    /*******************************
     * Runtime Dependencies
     *******************************/
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'jakarta.persistence:jakarta.persistence-api'
    implementation 'com.zaxxer:HikariCP'
    implementation 'org.hibernate.orm:hibernate-core'

    /*******************************
     * Test Dependencies
     *******************************/
    testImplementation('org.springframework:spring-test')
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }

    testImplementation 'org.postgresql:postgresql'

}

test {
    useJUnitPlatform {
    }
    systemProperty 'spring.profiles.active', 'polaristest'
}

task startCrdbCluster(type: Exec) {
    commandLine '/bin/echo', project.file('src/functionalTest/scripts/start_docker_containers.sh')
    commandLine 'sh',
            project.file('src/functionalTest/scripts/start_docker_containers.sh'),
            project.file('src/functionalTest/scripts/docker-compose-aurora.yml')
}

task stopCrdbCluster(type: Exec) {
    commandLine 'sh',
            project.file('src/functionalTest/scripts/stop_docker_containers.sh'),
            project.file('src/functionalTest/scripts/docker-compose-aurora.yml')
}

functionalTest {
    if (project.ext.runDockerContainers) {
        useJUnitPlatform {
        }
        dependsOn 'startCrdbCluster'
        finalizedBy 'stopCrdbCluster'
    }
    // Set the active Spring profile for functional tests
    systemProperty 'spring.profiles.active', 'polaris_functional_aurora_test'
    systemProperty 'service.auroraDataSourceEnabled', 'true'
}

spotbugsTest.enabled = false
