apply plugin: 'nebula.facet'

// Define the facets for functional testing
facets {
    functionalTest {
        parentSourceSet = "test"
        testTaskName = 'functionalTestWithDifferentDB'
        includeInCheckLifecycle = false
    }
}

sourceSets {
    functionalTest {
        groovy {
            srcDir 'src/functionalTest/java'
        }
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

// Define the property to control Docker container execution
ext {
    runDockerContainers = project.hasProperty('startCluster') ? Boolean.getBoolean('startCluster') : true
}

// Define dependencies
dependencies {
    /*******************************
     * Compile Dependencies
     *******************************/
    api(project(":metacat-connector-hive"))
    api(project(":metacat-connector-jdbc"))
    api(project(":metacat-common-server"))
    api('org.springframework.data:spring-data-jpa')
    api('org.springframework.boot:spring-boot-starter-aop')
    api('org.springframework.retry:spring-retry')
    api("org.springframework:spring-aspects")
    api("com.h2database:h2")

    /*******************************
     * Runtime Dependencies
     *******************************/
    implementation 'jakarta.persistence:jakarta.persistence-api'
    implementation 'com.zaxxer:HikariCP'
    implementation 'org.hibernate.orm:hibernate-core'

    /*******************************
     * Test Dependencies
     *******************************/
    testImplementation('org.springframework:spring-test')
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testImplementation 'org.postgresql:postgresql'
}

// Configure the test task
test {
    useJUnitPlatform {
    }
    systemProperty 'spring.profiles.active', 'polaristest'
}

// Define tasks for starting and stopping CRDB cluster
task startCrdbCluster(type: Exec) {
    commandLine 'sh',
            project.file('src/functionalTest/scripts/start_docker_containers.sh'),
            project.file('src/functionalTest/scripts/docker-compose.yml')
}

task stopCrdbCluster(type: Exec) {
    commandLine 'sh',
            project.file('src/functionalTest/scripts/stop_docker_containers.sh'),
            project.file('src/functionalTest/scripts/docker-compose.yml')
}

// Define tasks for starting and stopping Aurora cluster
task startAuroraCluster(type: Exec) {
    commandLine 'sh',
            project.file('src/functionalTest/scripts/start_docker_containers.sh'),
            project.file('src/functionalTest/scripts/docker-compose-aurora.yml')
}

task stopAuroraCluster(type: Exec) {
    commandLine 'sh',
            project.file('src/functionalTest/scripts/stop_docker_containers.sh'),
            project.file('src/functionalTest/scripts/docker-compose-aurora.yml')
}

// Define functionalTestCRDB task
task functionalTestCRDB(type: Test) {
    outputs.upToDateWhen { false }

    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath

    if (project.ext.runDockerContainers) {
        useJUnitPlatform {
        }
        dependsOn 'startCrdbCluster'
        finalizedBy 'stopCrdbCluster'
    }
    systemProperty 'spring.profiles.active', 'polaris_functional_test'
    systemProperty 'service.auroraDataSourceEnabled', 'false'
}

// Define functionalTestAurora task
task functionalTestAurora(type: Test) {
    outputs.upToDateWhen { false }

    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath

    if (project.ext.runDockerContainers) {
        useJUnitPlatform {
        }
        dependsOn 'startAuroraCluster'
        finalizedBy 'stopAuroraCluster'
    }
    systemProperty 'spring.profiles.active', 'polaris_functional_aurora_test'
    systemProperty 'service.auroraDataSourceEnabled', 'true'
}

// Disable SpotBugs for tests
spotbugsTest.enabled = false
