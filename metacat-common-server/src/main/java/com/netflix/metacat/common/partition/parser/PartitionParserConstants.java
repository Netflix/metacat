/*
 * Copyright 2016 Netflix, Inc.
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *        http://www.apache.org/licenses/LICENSE-2.0
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/* Generated By:JJTree&JavaCC: Do not edit this line. PartitionParserConstants.java */
package com.netflix.metacat.common.partition.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PartitionParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EQUAL = 3;
  /** RegularExpression Id. */
  int NEQUAL = 4;
  /** RegularExpression Id. */
  int GTE = 5;
  /** RegularExpression Id. */
  int GT = 6;
  /** RegularExpression Id. */
  int LTE = 7;
  /** RegularExpression Id. */
  int LT = 8;
  /** RegularExpression Id. */
  int LPAREN = 9;
  /** RegularExpression Id. */
  int RPAREN = 10;
  /** RegularExpression Id. */
  int COMMA = 11;
  /** RegularExpression Id. */
  int INT = 12;
  /** RegularExpression Id. */
  int DIGIT = 13;
  /** RegularExpression Id. */
  int FLOAT = 14;
  /** RegularExpression Id. */
  int EXPONENT = 15;
  /** RegularExpression Id. */
  int MANTISSA = 16;
  /** RegularExpression Id. */
  int DIGITS = 17;
  /** RegularExpression Id. */
  int AND = 18;
  /** RegularExpression Id. */
  int OR = 19;
  /** RegularExpression Id. */
  int NOT = 20;
  /** RegularExpression Id. */
  int MATCHES = 21;
  /** RegularExpression Id. */
  int LIKE = 22;
  /** RegularExpression Id. */
  int BETWEEN = 23;
  /** RegularExpression Id. */
  int IN = 24;
  /** RegularExpression Id. */
  int BOOLEAN = 25;
  /** RegularExpression Id. */
  int VARIABLE = 26;
  /** RegularExpression Id. */
  int CHARS = 27;
  /** RegularExpression Id. */
  int QUOTE = 28;
  /** RegularExpression Id. */
  int SQUOTE = 29;
  /** RegularExpression Id. */
  int ENDQUOTE = 30;
  /** RegularExpression Id. */
  int CHAR = 31;
  /** RegularExpression Id. */
  int SENDQUOTE = 32;
  /** RegularExpression Id. */
  int SCHAR = 33;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int STRING_STATE = 1;
  /** Lexical state. */
  int SSTRING_STATE = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "<EQUAL>",
    "<NEQUAL>",
    "\">=\"",
    "\">\"",
    "\"<=\"",
    "\"<\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "<INT>",
    "<DIGIT>",
    "<FLOAT>",
    "<EXPONENT>",
    "<MANTISSA>",
    "<DIGITS>",
    "<AND>",
    "<OR>",
    "\"not\"",
    "\"matches\"",
    "\"like\"",
    "\"between\"",
    "\"in\"",
    "<BOOLEAN>",
    "<VARIABLE>",
    "<CHARS>",
    "\"\\\"\"",
    "\"\\\'\"",
    "<ENDQUOTE>",
    "<CHAR>",
    "<SENDQUOTE>",
    "<SCHAR>",
  };

}
