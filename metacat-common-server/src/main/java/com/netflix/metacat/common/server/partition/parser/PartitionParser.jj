/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. PartitionParser.jj */
/*@egen*/options {
                           
               
  STATIC = false;
                 
  IGNORE_CASE = true;
}

PARSER_BEGIN(PartitionParser)
package com.netflix.metacat.common.server.partition.parser;
public class PartitionParser/*@bgen(jjtree)*/implements PartitionParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTPartitionParserState jjtree = new JJTPartitionParserState();

/*@egen*/
	public static void main (String args []) throws ParseException {
		PartitionParser parser = new PartitionParser(new java.io.StringReader(args[0]));
	    SimpleNode root = parser.filter();
	    root.dump("");
	    System.out.println(root.jjtAccept(new com.netflix.metacat.common.server.partition.visitor.PartitionParserEval(), null));
	}
}
PARSER_END(PartitionParser)

SKIP :
{
 	" " | "\t"
}
TOKEN :
{
	< EQUAL: "==" | "=">
|	< NEQUAL: "!=" | "<>">
|	< GTE: ">=" >
|	< GT: ">" >
|	< LTE: "<=" >
|	< LT: "<" >
|   < LPAREN : "(">
|   < RPAREN : ")">
|   < COMMA: "," >
|   < INT: "-"( <DIGIT> )+ | ( <DIGIT> )+>
|   < #DIGIT: ["0" - "9"] >
|   < FLOAT: <INT> <EXPONENT> | <MANTISSA> ( <EXPONENT> )? >
|   < #EXPONENT: ["e", "E"] ("+"|"-")? <INT> >
|   < #MANTISSA: <INT> "." ( <DIGIT> )* | ( <DIGIT> )* "." <INT> >
|   < #DIGITS : (["0"-"9"])+ >
|   < AND: "and" | "&&" >
|   < OR: "or" | "||">
|   < NOT: "not">
|   < MATCHES: "matches">
|   < LIKE: "like">
|   < IS: "is">
|   < NULL: "null">
|   < BETWEEN: "between">
|   < IN: "in">
|   < BOOLEAN: "true" | "false" >
|   < VARIABLE : "_" < CHARS > | ["A"-"Z"] < CHARS > | ["a"-"z"] <CHARS > | ["a"-"z","A"-"Z"] >
|   < #CHARS : (["a"-"z","0"-"9","_","-","A"-"Z"])+ >
|   < QUOTE:"\"" > : STRING_STATE
|   < SQUOTE:"\'" > : SSTRING_STATE
}
<STRING_STATE> TOKEN:
{
  <ENDQUOTE:<QUOTE>> : DEFAULT
| <CHAR:~["\""]>
}
<SSTRING_STATE> TOKEN:
{
  <SENDQUOTE:<SQUOTE>> : DEFAULT
| <SCHAR:~["\'"]>
}
SimpleNode filter()        :
{/*@bgen(jjtree) FILTER */
  ASTFILTER jjtn000 = new ASTFILTER(JJTFILTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }{/*@bgen(jjtree) FILTER */
  try {
/*@egen*/
  expr() <EOF>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void expr():
{ }
{
	< LPAREN > expr() < RPAREN > (< AND >/*@bgen(jjtree) #AND( 2) */
                                              {
                                                ASTAND jjtn001 = new ASTAND(JJTAND);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
                                              }
                                              try {
/*@egen*/ expr()/*@bgen(jjtree)*/
                                              } catch (Throwable jjte001) {
                                                if (jjtc001) {
                                                  jjtree.clearNodeScope(jjtn001);
                                                  jjtc001 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte001 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte001;
                                                }
                                                if (jjte001 instanceof ParseException) {
                                                  throw (ParseException)jjte001;
                                                }
                                                throw (Error)jjte001;
                                              } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                }
                                              }
/*@egen*/         | < OR >/*@bgen(jjtree) #OR( 2) */
                                                                      {
                                                                        ASTOR jjtn002 = new ASTOR(JJTOR);
                                                                        boolean jjtc002 = true;
                                                                        jjtree.openNodeScope(jjtn002);
                                                                      }
                                                                      try {
/*@egen*/ expr()/*@bgen(jjtree)*/
                                                                      } catch (Throwable jjte002) {
                                                                        if (jjtc002) {
                                                                          jjtree.clearNodeScope(jjtn002);
                                                                          jjtc002 = false;
                                                                        } else {
                                                                          jjtree.popNode();
                                                                        }
                                                                        if (jjte002 instanceof RuntimeException) {
                                                                          throw (RuntimeException)jjte002;
                                                                        }
                                                                        if (jjte002 instanceof ParseException) {
                                                                          throw (ParseException)jjte002;
                                                                        }
                                                                        throw (Error)jjte002;
                                                                      } finally {
                                                                        if (jjtc002) {
                                                                          jjtree.closeNodeScope(jjtn002,  2);
                                                                        }
                                                                      }
/*@egen*/       )?
|	EvalExpr() (< AND >/*@bgen(jjtree) #AND( 2) */
                            {
                              ASTAND jjtn003 = new ASTAND(JJTAND);
                              boolean jjtc003 = true;
                              jjtree.openNodeScope(jjtn003);
                            }
                            try {
/*@egen*/ expr()/*@bgen(jjtree)*/
                            } catch (Throwable jjte003) {
                              if (jjtc003) {
                                jjtree.clearNodeScope(jjtn003);
                                jjtc003 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte003 instanceof RuntimeException) {
                                throw (RuntimeException)jjte003;
                              }
                              if (jjte003 instanceof ParseException) {
                                throw (ParseException)jjte003;
                              }
                              throw (Error)jjte003;
                            } finally {
                              if (jjtc003) {
                                jjtree.closeNodeScope(jjtn003,  2);
                              }
                            }
/*@egen*/         | < OR >/*@bgen(jjtree) #OR( 2) */
                                                    {
                                                      ASTOR jjtn004 = new ASTOR(JJTOR);
                                                      boolean jjtc004 = true;
                                                      jjtree.openNodeScope(jjtn004);
                                                    }
                                                    try {
/*@egen*/ expr()/*@bgen(jjtree)*/
                                                    } catch (Throwable jjte004) {
                                                      if (jjtc004) {
                                                        jjtree.clearNodeScope(jjtn004);
                                                        jjtc004 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte004 instanceof RuntimeException) {
                                                        throw (RuntimeException)jjte004;
                                                      }
                                                      if (jjte004 instanceof ParseException) {
                                                        throw (ParseException)jjte004;
                                                      }
                                                      throw (Error)jjte004;
                                                    } finally {
                                                      if (jjtc004) {
                                                        jjtree.closeNodeScope(jjtn004,  2);
                                                      }
                                                    }
/*@egen*/       )?
}
void EvalExpr()      :
{ boolean not = false; }
{/*@bgen(jjtree) #NOT( not) */
        {
          ASTNOT jjtn001 = new ASTNOT(JJTNOT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	([ < NOT > { not=true; } ] eval())/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  not);
          }
        }
/*@egen*/          
}
void eval()      :
{ }
{
    LOOKAHEAD({ getToken(2).kind==BETWEEN || getToken(3).kind==BETWEEN })
	    BetweenEval()
|   LOOKAHEAD({ getToken(2).kind==IN || getToken(3).kind==IN })
        InEval()
|   LOOKAHEAD({ getToken(2).kind==LIKE || getToken(3).kind==LIKE })
        LikeEval()
|   LOOKAHEAD({ getToken(2).kind==IS })
                NullEval()
|   CompareEval()
}
void BetweenEval()         :
{/*@bgen(jjtree) BETWEEN */
  ASTBETWEEN jjtn000 = new ASTBETWEEN(JJTBETWEEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BETWEEN */
    try {
/*@egen*/
    term() [ < NOT > { jjtn000.not=true; } ] < BETWEEN > term() < AND > term()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void InEval()    :
{/*@bgen(jjtree) IN */
  ASTIN jjtn000 = new ASTIN(JJTIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IN */
    try {
/*@egen*/
    term() [ < NOT > { jjtn000.not=true; } ] < IN > <LPAREN> term() ( < COMMA > term() ) * <RPAREN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void LikeEval()      :
{/*@bgen(jjtree) LIKE */
  ASTLIKE jjtn000 = new ASTLIKE(JJTLIKE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LIKE */
    try {
/*@egen*/
    term() [ < NOT > { jjtn000.not=true; } ] < LIKE > term()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void NullEval()      :
{/*@bgen(jjtree) NULL */
  ASTNULL jjtn000 = new ASTNULL(JJTNULL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NULL */
    try {
/*@egen*/
    term() < IS > [ < NOT > { jjtn000.not=true; } ] < NULL >/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void CompareEval()         :
{/*@bgen(jjtree) COMPARE */
  ASTCOMPARE jjtn000 = new ASTCOMPARE(JJTCOMPARE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) COMPARE */
    try {
/*@egen*/
    term() (comp() term())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void comp():
{ }
{/*@bgen(jjtree) GT */
  {
    ASTGT jjtn001 = new ASTGT(JJTGT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ < GT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/    
|/*@bgen(jjtree) LT */
  {
    ASTLT jjtn002 = new ASTLT(JJTLT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ < LT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/    
|/*@bgen(jjtree) LTE */
  {
    ASTLTE jjtn003 = new ASTLTE(JJTLTE);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ < LTE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/     
|/*@bgen(jjtree) GTE */
  {
    ASTGTE jjtn004 = new ASTGTE(JJTGTE);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/ < GTE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/     
|/*@bgen(jjtree) EQ */
  {
    ASTEQ jjtn005 = new ASTEQ(JJTEQ);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
  }
  try {
/*@egen*/ < EQUAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
  }
/*@egen*/    
|/*@bgen(jjtree) NEQ */
  {
    ASTNEQ jjtn006 = new ASTNEQ(JJTNEQ);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
  }
  try {
/*@egen*/ < NEQUAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
  }
/*@egen*/     
|/*@bgen(jjtree) MATCHES */
  {
    ASTMATCHES jjtn007 = new ASTMATCHES(JJTMATCHES);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
  }
  try {
/*@egen*/ < MATCHES >/*@bgen(jjtree)*/
  } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
  }
/*@egen*/         
}
void term():
{
  Token t;
  StringBuilder builder = new StringBuilder();
}
{
    ( t = < INT >/*@bgen(jjtree) NUM */
                    {
                      ASTNUM jjtn001 = new ASTNUM(JJTNUM);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                    }
/*@egen*/   { jjtn001.value = new java.math.BigDecimal(t.image); }/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
                    }
/*@egen*/      )
  | ( t = < FLOAT >/*@bgen(jjtree) NUM */
                    {
                      ASTNUM jjtn002 = new ASTNUM(JJTNUM);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                    }
/*@egen*/ { jjtn002.value = new java.math.BigDecimal(t.image); }/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
                    }
/*@egen*/     )
  | ( < QUOTE > (t = < CHAR > { builder.append(t.image); })* < ENDQUOTE >/*@bgen(jjtree) STRING */
                                                                          {
                                                                            ASTSTRING jjtn003 = new ASTSTRING(JJTSTRING);
                                                                            boolean jjtc003 = true;
                                                                            jjtree.openNodeScope(jjtn003);
                                                                          }
                                                                          try {
/*@egen*//*@bgen(jjtree)*/
                                                                          {
                                                                            jjtree.closeNodeScope(jjtn003, true);
                                                                            jjtc003 = false;
                                                                          }
/*@egen*/ { jjtn003.value = builder.toString(); }/*@bgen(jjtree)*/
                                                                          } finally {
                                                                            if (jjtc003) {
                                                                              jjtree.closeNodeScope(jjtn003, true);
                                                                            }
                                                                          }
/*@egen*/        )
  | ( < SQUOTE > (t = < SCHAR > { builder.append(t.image); })* < SENDQUOTE >/*@bgen(jjtree) STRING */
                                                                             {
                                                                               ASTSTRING jjtn004 = new ASTSTRING(JJTSTRING);
                                                                               boolean jjtc004 = true;
                                                                               jjtree.openNodeScope(jjtn004);
                                                                             }
                                                                             try {
/*@egen*//*@bgen(jjtree)*/
                                                                             {
                                                                               jjtree.closeNodeScope(jjtn004, true);
                                                                               jjtc004 = false;
                                                                             }
/*@egen*/ { jjtn004.value = builder.toString(); }/*@bgen(jjtree)*/
                                                                             } finally {
                                                                               if (jjtc004) {
                                                                                 jjtree.closeNodeScope(jjtn004, true);
                                                                               }
                                                                             }
/*@egen*/        )
  | ( t = < BOOLEAN >/*@bgen(jjtree) BOOLEAN */
                      {
                        ASTBOOLEAN jjtn005 = new ASTBOOLEAN(JJTBOOLEAN);
                        boolean jjtc005 = true;
                        jjtree.openNodeScope(jjtn005);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn005, true);
                        jjtc005 = false;
                      }
/*@egen*/ { jjtn005.value = t.image; }/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc005) {
                          jjtree.closeNodeScope(jjtn005, true);
                        }
                      }
/*@egen*/          )
  | ( t = < VARIABLE >/*@bgen(jjtree) VAR */
                       {
                         ASTVAR jjtn006 = new ASTVAR(JJTVAR);
                         boolean jjtc006 = true;
                         jjtree.openNodeScope(jjtn006);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn006, true);
                         jjtc006 = false;
                       }
/*@egen*/ { jjtn006.value = new Variable(t.image); }/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc006) {
                           jjtree.closeNodeScope(jjtn006, true);
                         }
                       }
/*@egen*/     )
}