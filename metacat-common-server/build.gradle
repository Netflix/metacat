/*
 *
 *  Copyright 2017 Netflix, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */

ext {
    excludePattern = "**/com/netflix/metacat/common/server/partition/parser/**"
}

dependencies {
    /*******************************
     * API Dependencies
     *******************************/

    compile(project(":metacat-common"))
    compile("com.google.inject:guice")
    compile("net.sf.dozer:dozer")
    compile("org.apache.tomcat:tomcat-jdbc")

    /*******************************
     * Implementation Dependencies
     *******************************/
    compile("com.netflix.spectator:spectator-reg-servo")
    compile("com.netflix.spectator:spectator-api")
    compile("com.google.guava:guava")
    compile("org.slf4j:slf4j-api")
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-logging")
    compile("org.springframework:spring-jdbc")


    /*******************************
     * Provided Dependencies
     *******************************/

    compileOnly("org.springframework.boot:spring-boot-configuration-processor")

    /*******************************
     * Runtime Dependencies
     *******************************/

    /*******************************
     * Test Dependencies
     *******************************/

    testCompile(project(":metacat-common").sourceSets.test.output)
    testCompile("commons-logging:commons-logging")
}

tasks.withType(Checkstyle) {
    exclude excludePattern
}

tasks.withType(Pmd) {
    exclude excludePattern
}
