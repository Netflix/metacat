/*
 *
 *  Copyright 2017 Netflix, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */

ext {
    startCluster = project.hasProperty('startCluster') ? Boolean.getBoolean('startCluster') : true
    logger.info("metacat-functional-tests: start cluster = '${startCluster}'")

    stopCluster = project.hasProperty('stopCluster') ? Boolean.getBoolean('stopCluster') : true
    logger.info("metacat-functional-tests: stop cluster = '${stopCluster}'")
}

apply plugin: 'nebula.facet'

facets {
    functionalTest {
        parentSourceSet = "test"
        testTaskName = 'functionalTestWithDifferentDB'
        includeInCheckLifecycle = false
    }
}

sourceSets {
    functionalTest {
        groovy {
            srcDir 'src/functionalTest/groovy'
        }
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

configurations {
    warproject

    all*.exclude group: 'javax.ws.rs', module: 'javax.ws.rs-api'
}

dependencies {
    testImplementation project(path: ':metacat-metadata-mysql')
    warproject(project(path: ':metacat-war', configuration: 'archives'))

    /*******************************
     * Compile Dependencies
     *******************************/

    /*******************************
     * Provided Dependencies
     *******************************/

    /*******************************
     * Runtime Dependencies
     *******************************/

    /*******************************
     * Test Dependencies
     *******************************/

    // Test that metacat-client can be used with jersey 1
    testImplementation(project(":metacat-common-server"))
    testImplementation(project(":metacat-connector-hive"))
    testImplementation(project(":metacat-testdata-provider"))
    functionalTestImplementation(project(":metacat-client"))
    functionalTestImplementation("org.apache.hadoop:hadoop-core")
    functionalTestImplementation("org.apache.hive:hive-exec:${hive_version}") {
        exclude module: "pentaho-aggdesigner-algorithm"
    }

    testImplementation("org.skyscreamer:jsonassert")
}

task expandWar(type: Copy) {
    dependsOn ':metacat-war:war'

    from { configurations.warproject.collect { zipTree(it) } }
    into file("${buildDir}/metacat-war-expanded/ROOT")
}

// Aurora configuration tasks
task startMetacatClusterAurora(type: Exec) {
    dependsOn 'expandWar'
    if (project.ext.startCluster) {
        commandLine 'sh', rootProject.file('scripts/start_metacat_test_cluster.sh'), project.file('metacat-test-cluster/docker-compose-aurora.yml')
    } else {
        commandLine '/bin/echo', 'skipping cluster start'
    }
}

task stopMetacatClusterAurora(type: Exec) {
    if (project.ext.stopCluster) {
        commandLine 'sh', rootProject.file('scripts/stop_metacat_test_cluster.sh'), project.file('metacat-test-cluster/docker-compose-aurora.yml')
    } else {
        commandLine '/bin/echo', 'skipping cluster stop'
    }
}

task metacatPortsAurora {
    dependsOn 'startMetacatClusterAurora'
    ext.http_port = null
    ext.metacat_http_debug_port = null
    ext.metacat_hive_thrift_port = null
    ext.metacat_embedded_hive_thrift_port = null
    ext.metacat_embedded_fast_hive_thrift_port = null
    ext.hive_thrift_port = null
    ext.hive_debug_port = null

    doLast {
        def get_docker_port = { String label, int exposed_port ->
            new ByteArrayOutputStream().withStream { os ->
                exec {
                    commandLine 'sh', rootProject.file('scripts/print_docker_port.sh'), "label=${label}", exposed_port
                    standardOutput = os
                }
                return os.toString().trim()
            }
        }

        ext.http_port = get_docker_port('com.netflix.metacat.oss.test.war', 8080)
        ext.metacat_http_debug_port = get_docker_port('com.netflix.metacat.oss.test.war', 8000)
        ext.metacat_hive_thrift_port = get_docker_port('com.netflix.metacat.oss.test.war', 12001)
        ext.metacat_embedded_hive_thrift_port = get_docker_port('com.netflix.metacat.oss.test.war', 12003)
        ext.metacat_embedded_fast_hive_thrift_port = get_docker_port('com.netflix.metacat.oss.test.war', 12004)
        ext.hive_thrift_port = get_docker_port('com.netflix.metacat.oss.test.hive', 9083)
        ext.hive_debug_port = get_docker_port('com.netflix.metacat.oss.test.hive', 8005)

        println '++ Container Exposed ports ++'
        println '+++ Metacat Web Port: [' + ext.http_port + ']'
        println '+++ Metacat Web Debug Port: [' + ext.metacat_http_debug_port + ']'
        println '+++ Metacat Hive Thrift Port: [' + ext.metacat_hive_thrift_port + ']'
        println '+++ Metacat Embedded Hive Thrift Port: [' + ext.metacat_embedded_hive_thrift_port + ']'
        println '+++ Metacat Embedded Fast Hive Thrift Port: [' + ext.metacat_embedded_fast_hive_thrift_port + ']'
        println '+++ Metacat Hive Metastore Port: [' + ext.hive_thrift_port + ']'
        println '+++ Metacat Hive Metastore Debug Port: [' + ext.hive_debug_port + ']'
    }
}

// CRDB configuration tasks
task startMetacatClusterCRDB(type: Exec) {
    dependsOn 'expandWar'
    if (project.ext.startCluster) {
        commandLine 'sh', rootProject.file('scripts/start_metacat_test_cluster.sh'), project.file('metacat-test-cluster/docker-compose.yml')
    } else {
        commandLine '/bin/echo', 'skipping cluster start'
    }
}

task stopMetacatClusterCRDB(type: Exec) {
    if (project.ext.stopCluster) {
        commandLine 'sh', rootProject.file('scripts/stop_metacat_test_cluster.sh'), project.file('metacat-test-cluster/docker-compose.yml')
    } else {
        commandLine '/bin/echo', 'skipping cluster stop'
    }
}

task metacatPortsCRDB {
    dependsOn 'startMetacatClusterCRDB'
    ext.http_port = null
    ext.metacat_http_debug_port = null
    ext.metacat_hive_thrift_port = null
    ext.metacat_embedded_hive_thrift_port = null
    ext.metacat_embedded_fast_hive_thrift_port = null
    ext.hive_thrift_port = null
    ext.hive_debug_port = null

    doLast {
        def get_docker_port = { String label, int exposed_port ->
            new ByteArrayOutputStream().withStream { os ->
                exec {
                    commandLine 'sh', rootProject.file('scripts/print_docker_port.sh'), "label=${label}", exposed_port
                    standardOutput = os
                }
                return os.toString().trim()
            }
        }

        ext.http_port = get_docker_port('com.netflix.metacat.oss.test.war', 8080)
        ext.metacat_http_debug_port = get_docker_port('com.netflix.metacat.oss.test.war', 8000)
        ext.metacat_hive_thrift_port = get_docker_port('com.netflix.metacat.oss.test.war', 12001)
        ext.metacat_embedded_hive_thrift_port = get_docker_port('com.netflix.metacat.oss.test.war', 12003)
        ext.metacat_embedded_fast_hive_thrift_port = get_docker_port('com.netflix.metacat.oss.test.war', 12004)
        ext.hive_thrift_port = get_docker_port('com.netflix.metacat.oss.test.hive', 9083)
        ext.hive_debug_port = get_docker_port('com.netflix.metacat.oss.test.hive', 8005)

        println '++ Container Exposed ports ++'
        println '+++ Metacat Web Port: [' + ext.http_port + ']'
        println '+++ Metacat Web Debug Port: [' + ext.metacat_http_debug_port + ']'
        println '+++ Metacat Hive Thrift Port: [' + ext.metacat_hive_thrift_port + ']'
        println '+++ Metacat Embedded Hive Thrift Port: [' + ext.metacat_embedded_hive_thrift_port + ']'
        println '+++ Metacat Embedded Fast Hive Thrift Port: [' + ext.metacat_embedded_fast_hive_thrift_port + ']'
        println '+++ Metacat Hive Metastore Port: [' + ext.hive_thrift_port + ']'
        println '+++ Metacat Hive Metastore Debug Port: [' + ext.hive_debug_port + ']'
    }
}

// Functional test tasks for Aurora
task functionalTestAurora(type: Test) {
    outputs.upToDateWhen { false }

    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath

    doFirst {
        def properties = [
                'metacat_http_port'                     : metacatPortsAurora.http_port as String,
                'metacat_hive_thrift_port'              : metacatPortsAurora.metacat_hive_thrift_port as String,
                'hive_thrift_port'                      : metacatPortsAurora.hive_thrift_port as String,
                'metacat_embedded_hive_thrift_port'     : metacatPortsAurora.metacat_embedded_hive_thrift_port as String,
                'metacat_embedded_fast_hive_thrift_port': metacatPortsAurora.metacat_embedded_fast_hive_thrift_port as String,
                'org.slf4j.simpleLogger.defaultLogLevel': 'debug'
        ]
        System.properties.stringPropertyNames().findAll { it?.toLowerCase()?.contains("metacat") }.each {
            properties[it] = System.getProperty(it)
        }
        systemProperties = properties
    }


    testLogging {
        showStandardStreams = true
    }

    dependsOn 'expandWar', 'startMetacatClusterAurora', 'metacatPortsAurora'
    finalizedBy 'stopMetacatClusterAurora'
}

// Functional test tasks for CRDB
task functionalTestCRDB(type: Test) {
    outputs.upToDateWhen { false }

    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath

    doFirst {
        def properties = [
                'metacat_http_port'                     : metacatPortsCRDB.http_port as String,
                'metacat_hive_thrift_port'              : metacatPortsCRDB.metacat_hive_thrift_port as String,
                'hive_thrift_port'                      : metacatPortsCRDB.hive_thrift_port as String,
                'metacat_embedded_hive_thrift_port'     : metacatPortsCRDB.metacat_embedded_hive_thrift_port as String,
                'metacat_embedded_fast_hive_thrift_port': metacatPortsCRDB.metacat_embedded_fast_hive_thrift_port as String,
                'org.slf4j.simpleLogger.defaultLogLevel': 'debug'
        ]
        System.properties.stringPropertyNames().findAll { it?.toLowerCase()?.contains("metacat") }.each {
            properties[it] = System.getProperty(it)
        }
        systemProperties = properties
    }

    testLogging {
        showStandardStreams = true
    }

    dependsOn 'expandWar', 'startMetacatClusterCRDB', 'metacatPortsCRDB'
    finalizedBy 'stopMetacatClusterCRDB'
}

clean {
    delete "derby.log"
    delete "metastore_db"
}
