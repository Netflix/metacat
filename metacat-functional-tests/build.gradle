/*
 * Copyright 2016 Netflix, Inc.
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *        http://www.apache.org/licenses/LICENSE-2.0
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

ext {
    startCluster = project.hasProperty('startCluster') ? Boolean.getBoolean('startCluster') : true
    logger.info("metacat-functional-tests: start cluster = '${startCluster}'")

    stopCluster = project.hasProperty('stopCluster') ? Boolean.getBoolean('stopCluster') : true
    logger.info("metacat-functional-tests: stop cluster = '${stopCluster}'")
}

configurations {
    warproject
    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime

    all*.exclude group: 'javax.ws.rs', module: 'javax.ws.rs-api'
}

sourceSets {
    functionalTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output

        java.srcDir file('src/functionalTest/java')
        groovy.srcDir file('src/functionalTest/groovy')
        resources.srcDir file('src/functionalTest/resources')
    }
}

dependencies {
    warproject project(path: ':metacat-server', configuration: 'archives')

    // Test that metacat-client can be used with jersey 1
    testCompile(project(':metacat-client')) {
        exclude group: 'javax.ws.rs', module: 'javax.ws.rs-api'
        exclude group: 'org.glassfish.jersey.core'
    }
    testCompile 'com.sun.jersey:jersey-client:1.19.1'

    testCompile project(':metacat-common-server')
    testCompile 'javax.ws.rs:jsr311-api:1.1.1'
    testCompile "com.facebook.presto:presto-hive-hadoop2:${presto_version}"
}

task expandWar(type: Copy) {
    dependsOn ':metacat-server:war'

    from { configurations.warproject.collect { zipTree(it) } }
    into file("${buildDir}/metacat-war-expanded/ROOT")
}

task createWarDockerfile() {
    dependsOn 'expandWar'

    ext.destFile = project.file('build/metacat-war-expanded/Dockerfile')

    outputs.file ext.destFile

    doLast {
        copy {
            from 'build/resources/functionalTest/logging.properties'
            into 'build/metacat-war-expanded'
        }
        ext.destFile.text = """
FROM tomcat:8.0-jre8
MAINTAINER dwatson@netflix.com
VOLUME ["/usr/local/tomcat/logs", "/etc/metacat"]
EXPOSE 7001 7101 12001 12002
RUN rm -rf /usr/local/tomcat/webapps
COPY ./ROOT /usr/local/tomcat/webapps/ROOT
COPY ./logging.properties /usr/local/tomcat/conf/
""".trim()
    }
}

task buildWarImage(type: Exec) {
    dependsOn 'createWarDockerfile'

    inputs.file createWarDockerfile.destFile

    commandLine 'docker', 'build', '--pull', '--tag', 'netflix_metacat_test/metacat_server', createWarDockerfile.destFile.parentFile
}

task startMetacatCluster(type: Exec) {
    if (project.ext.startCluster) {
        commandLine rootProject.file('scripts/start_metacat_test_cluster.sh'), project.file('metacat-test-cluster/docker-compose.yml')
    } else {
        commandLine '/bin/echo', 'skipping cluster start'
    }
}

task stopMetacatCluster(type: Exec) {
    if (project.ext.stopCluster) {
        commandLine rootProject.file('scripts/stop_metacat_test_cluster.sh'), project.file('metacat-test-cluster/docker-compose.yml')
    } else {
        commandLine '/bin/echo', 'skipping cluster stop'
    }
}

task metacatPorts {
    dependsOn 'startMetacatCluster'
    ext.http_port = null
    ext.metacat_hive_thrift_port = null
    ext.metacat_s3_thrift_port = null
    ext.hive_thrift_port = null

    doLast {
        def get_docker_port = { String label, int exposed_port ->
            new ByteArrayOutputStream().withStream { os ->
                exec {
                    commandLine rootProject.file('scripts/print_docker_port.sh'), "label=${label}", exposed_port
                    standardOutput = os
                }
                return os.toString().trim()
            }
        }

        ext.http_port = get_docker_port('com.netflix.metacat.oss.test.war', 8080)
        ext.metacat_hive_thrift_port = get_docker_port('com.netflix.metacat.oss.test.war', 12001)
        ext.metacat_s3_thrift_port = get_docker_port('com.netflix.metacat.oss.test.war', 12002)
        ext.hive_thrift_port = get_docker_port('com.netflix.metacat.oss.test.hive', 9083)

        logger.info('metacat-functional-tests: metacat http_port {}, metacat_hive_thrift_port {}, ' +
                'metacat_s3_thrift_port {}, hive_thrift_port {}',
                ext.http_port, ext.metacat_hive_thrift_port, ext.metacat_s3_thrift_port, ext.hive_thrift_port)
    }
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    outputs.upToDateWhen { false }

    doFirst {
        def properties = [
                'metacat_http_port'                     : metacatPorts.http_port as String,
                'metacat_hive_thrift_port'              : metacatPorts.metacat_hive_thrift_port as String,
                'metacat_s3_thrift_port'                : metacatPorts.metacat_s3_thrift_port as String,
                'hive_thrift_port'                      : metacatPorts.hive_thrift_port as String,
                'org.slf4j.simpleLogger.defaultLogLevel': 'debug'
        ]
        System.properties.stringPropertyNames().findAll { it?.toLowerCase()?.contains("metacat") }.each {
            properties[it] = System.getProperty(it)
        }
        systemProperties = properties
    }

    testLogging {
        showStandardStreams = true
    }

    dependsOn 'startMetacatCluster', 'metacatPorts'
    finalizedBy 'stopMetacatCluster'
}
